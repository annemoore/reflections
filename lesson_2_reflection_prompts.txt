What happens when you initialize a repository? Why do you need to do it?

The folder turns into a git repository where you can save commits. You need
to do it to save versions of the files in the folder and presumably to share
them with others through github.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an intermediate place where you can place files from the
working directory before committing them to the repository. It allows you to choose
which changed files you want to include in a commit.


How can you use the staging area to make sure you have one commit per logical
change?

You can place only the files that include one logical change in the the staging
area. If you made two logical changes (in different files), then only place one
in the staging area before making a commit, and then do the second in a different
commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful when you want to try out a new version of a program
or add a new feature, but still keep a working version without the new 
additions. Branches let you have a numbers of different versions, to each of which
you can keep on making changes. Without branches, you would have to remember 
different commit numbers for different versions, and it would be trickier to keep
changing each version.


How do the diagrams help you visualize the branch structure?

They helped me see how the different branches are formed and how it is the 
parent of each commit that links commits together. It was also very helpful
to see how commits that were not on a branch would not show up using git log
(and would be unreachable unless you remembered the git id).


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together results in all the changes made from the last commit
when they were in the same line being combined. All commits from both branches
will show up in git log in time order. Using git show will show the differences
between a commit and its parent (which will not necessarily be the commit
immediately before it since that could be from a separate branch). We represent it
in the diagram as two branches coming back together to form one branch. The
parent of each commit is preserved, as in the diagram.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

A big pro of automatic merging is that it is less time-consuming than doing
merges manually. It also may be better at finding changes than humans may be.
A con is that it may make changes that a person familiar with the code would not,
and no person has looked at the merge to make sure it makes sense.
